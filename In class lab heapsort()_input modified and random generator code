#include <iostream>
#include <cstdlib>
using namespace std;

// function to heapify the tree
void heapify(int arr[], int n, int root)
{
    // build heapify
    int Max = root; // Initialize largest as root
    int l = 2 * root + 1; // find the left child of the root
    int r = 2 * root + 2; // find the right child of the root

    // If left child is larger than root
    if (l < n && arr[l] > arr[Max])
        Max = l;

    // If right child is larger than Max
    if (r < n && arr[r] > arr[Max])
        Max = r;

    // If Max is not root
    if (Max != root) {
        swap(arr[root], arr[Max]);

        // Recursively heapify the changed sub-tree to preserve the heap property
        heapify(arr, n, Max);
    }



}

// implementing heap sort
void heapSort(int arr[], int n)
{
    // build heap
    // Begin from the last non-leaf node to heapify
    for (int i = n/2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    // extracting elements from heap one by one
    for (int i = n-1; i > 0; i--) {

        swap(arr[0], arr[i]);

        // Call heapify on the reduced heap
        heapify(arr, i, 0);
    }

}

/* print contents of array */
void displayArray(int arr[], int n)
{
    for (int i=0; i<n; ++i)
        cout << arr[i] << " ";
    cout << "\n";
}

// main program
int main()
{
    // Use current time as seed for random generator
    srand(time(0));

    int arr_size; // _
    cout << "Enter the size of the number array: " << endl;
    cin >> arr_size; // Get the size of the array

    int heap_arr[arr_size]; //Initialize the array

    for(int i = 0; i < arr_size; i++) {
        heap_arr[i] = rand(); // Get the number from the user to store in the array
    }

    int n = arr_size;
    cout<<"Input array"<<endl;
    displayArray(heap_arr,n);

    heapSort(heap_arr, n);

    cout << "Sorted array"<<endl;
    displayArray(heap_arr, n);
}
