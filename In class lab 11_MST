#include <bits/stdc++.h>
using namespace std;

// Number of vertices
#define NUM_VERTICES 6

// Function to find the vertex with minimum key value
int findMinKeyVertex(int key[], bool mstSet[])
{
    // Initialize min value
    int min = INT_MAX, min_index;

    for (int v = 0; v < NUM_VERTICES; v++)
        if (mstSet[v] == false && key[v] < min)
            min = key[v], min_index = v;

    return min_index;
}

// Function to print the constructed MST stored in parent[]
void printMST(int parent[], int graph[NUM_VERTICES][NUM_VERTICES])
{
    cout << "Edge \tWeight\n";
    for (int i = 1; i < NUM_VERTICES; i++)
        cout << parent[i] << " - " << i << " \t"
             << graph[i][parent[i]] << " \n";
}

// Function to construct and print MST
void primMST(int graph[NUM_VERTICES][NUM_VERTICES])
{
    // Array to store constructed MST
    int parent[NUM_VERTICES];

    // Key values used to pick minimum weight edge in cut
    int key[NUM_VERTICES];

    // To represent set of vertices included in MST
    bool mstSet[NUM_VERTICES];

    // Initialize all keys as INFINITE
    for (int i = 0; i < NUM_VERTICES; i++)
        key[i] = INT_MAX, mstSet[i] = false;

    key[0] = 0;

    parent[0] = -1;

    // The MST will have NUM_VERTICES vertices
    for (int count = 0; count < NUM_VERTICES - 1; count++) {

        // Pick the minimum key vertex from the
        // set of vertices not yet included in MST
        int u = findMinKeyVertex(key, mstSet);

        // Add the picked vertex to the MST Set
        mstSet[u] = true;


        for (int v = 0; v < NUM_VERTICES; v++)


            if (graph[u][v] && mstSet[v] == false
                && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }

    // Print the constructed MST
    printMST(parent, graph);
}

int main()
{
    int graph[NUM_VERTICES][NUM_VERTICES] = {{0, 3, 0, 0, 0, 1}, {3, 0, 2, 1, 10, 0},
                                             {0, 2, 0,3,0, 5 }, {0, 1, 3, 0, 5, 0},
                                             {0, 10, 0,5, 0, 4}, {1, 0, 5, 0, 4, 0}};

    // Print the solution
    primMST(graph);

    return 0;
}
